{"version":3,"file":"static/js/580.cf096285.chunk.js","mappings":"+MAkCA,MAzBA,YAAwD,IAAD,IAA1BA,QAAAA,OAA0B,SAC/CC,GAAYC,EAAAA,EAAAA,QAA0B,MACtCC,GAAWC,EAAAA,EAAAA,KAUjB,OARAC,EAAAA,EAAAA,YAAU,WAGkB,OAAtBJ,EAAUK,SACZL,EAAUK,QAAQC,OAErB,GAAE,CAACP,KAGF,mBACE,aAAW,sBACXQ,UAAU,4EACVC,QAAS,WACPN,GAASO,EAAAA,EAAAA,MACV,EACDC,IAAKV,EANP,2BAWH,E,UCGD,MAvBA,YAA0C,IAAdW,EAAa,EAAbA,GAC1B,GAAoCC,EAAAA,EAAAA,IAClCC,EAAAA,EAAAA,IAAuBF,IADjBG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,UAGhBb,GAAWC,EAAAA,EAAAA,KAEjB,OACE,gBAAII,UAAU,4BAAd,WACE,SAAC,IAAD,CAAcA,UAAU,cACxB,4BACE,cAAGA,UAAU,mDAAb,SACGQ,KAEH,mBACER,UAAU,+BACVC,QAAS,kBAAMN,GAASc,EAAAA,EAAAA,IAAqB,CAAEL,GAAIA,IAA1C,EAFX,SAIGG,SAKV,EClBD,MAZA,WAEE,IAAMG,GAAiBL,EAAAA,EAAAA,GAAeM,EAAAA,IAEtC,OACE,eAAI,kBAAgB,kBAAkBX,UAAU,iBAAhD,SACGU,EAAeE,KAAI,SAACC,GAAD,OAClB,SAAC,EAAD,CAAkBT,GAAIS,GAAiBA,EADrB,KAKzB,EC0BD,MAhCA,YAAyD,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,iBAG3B,OACE,mBACE,cAAY,UACZf,UAAS,oFAFX,WAIE,iBAAKA,UAAS,eAAWc,EAAyB,GAAd,aAApC,WACE,eAAId,UAAU,iFAAd,uBAIA,eACEI,GAAG,kBACHJ,UAAU,qEAFZ,2BAOA,gBAAKA,UAAU,OAAf,UACE,SAAC,EAAD,CAAmBR,QAASsB,OAG9B,SAAC,EAAD,QAGF,gBAAKd,UAAYc,EAAyB,GAAd,YAA5B,SAA+CC,MAGpD,C","sources":["components/Sidebar/NewDocumentButton.tsx","components/Sidebar/DocumentListItem.tsx","components/Sidebar/DocumentList.tsx","components/Sidebar/index.tsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { useAppDispatch } from \"store/hooks\";\n\nimport { createDocument } from \"store/documentsSlice\";\n\ntype Props = {\n  focused?: boolean;\n};\n\nfunction NewDocumentButton({ focused = false }: Props) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    // if ref.current updated to button dom node\n    // from initial value of null\n    if (buttonRef.current !== null) {\n      buttonRef.current.focus();\n    }\n  }, [focused]);\n\n  return (\n    <button\n      aria-label=\"Create new document\"\n      className=\"bg-orange-400 py-3 rounded min-w-full text-15px leading-tight text-center\"\n      onClick={() => {\n        dispatch(createDocument());\n      }}\n      ref={buttonRef}\n    >\n      + New Document\n    </button>\n  );\n}\nexport default NewDocumentButton;\n","import { useAppDispatch, useAppSelector } from \"store/hooks\";\n\nimport { ReactComponent as IconDocument } from \"assets/icon-document.svg\";\n\nimport {\n  changeActiveDocument,\n  selectDocumentMetadata,\n} from \"store/documentsSlice\";\n\ntype Props = {\n  id: number;\n};\n\nfunction DocumentListItem({ id }: Props) {\n  const { documentName, createdOn } = useAppSelector(\n    selectDocumentMetadata(id)\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <li className=\"flex items-center gap-x-4\">\n      <IconDocument className=\"shrink-0\" />\n      <div>\n        <p className=\"font-light text-13px leading-tight text-gray-500\">\n          {createdOn}\n        </p>\n        <button\n          className=\"mt-1 text-15px leading-tight\"\n          onClick={() => dispatch(changeActiveDocument({ id: id }))}\n        >\n          {documentName}\n        </button>\n      </div>\n    </li>\n  );\n}\nexport default DocumentListItem;\n","import { useAppSelector } from \"store/hooks\";\n\nimport DocumentListItem from \"./DocumentListItem\";\nimport { selectAllIdsList } from \"store/documentsSlice\";\n\nfunction DocumentList() {\n  // todo: why doclist re-renders on active doc name update?\n  const documentIdList = useAppSelector(selectAllIdsList);\n\n  return (\n    <ul aria-labelledby=\"myDocumentsText\" className=\"mt-6 space-y-6\">\n      {documentIdList.map((documentId) => (\n        <DocumentListItem id={documentId} key={documentId} />\n      ))}\n    </ul>\n  );\n}\nexport default DocumentList;\n","import { ReactElement } from \"react\";\n\nimport NewDocumentButton from \"components/Sidebar/NewDocumentButton\";\nimport DocumentList from \"./DocumentList\";\n\ntype Props = {\n  expanded: boolean;\n  colorThemeSwitch: ReactElement;\n};\n\nfunction Sidebar({ expanded, colorThemeSwitch }: Props) {\n  // todo: focus trapping and focus back to sidebar control button on pressing Esc\n\n  return (\n    <aside\n      data-testid=\"sidebar\"\n      className={`px-6 py-7 bg-gray-900 fixed min-h-full flex flex-col gap-y-2 w-64 -translate-x-64`}\n    >\n      <div className={`grow ${!expanded ? \"invisible\" : \"\"}`}>\n        <h1 className=\"uppercase font-commissioner font-bold text-15px leading-tight tracking-[.33em]\">\n          Markdown\n        </h1>\n\n        <h2\n          id=\"myDocumentsText\"\n          className=\"uppercase font-roboto font-medium leading-tight text-gray-500 mt-7\"\n        >\n          My Documents\n        </h2>\n\n        <div className=\"mt-7\">\n          <NewDocumentButton focused={expanded} />\n        </div>\n\n        <DocumentList />\n      </div>\n\n      <div className={!expanded ? \"invisible\" : \"\"}>{colorThemeSwitch}</div>\n    </aside>\n  );\n}\n\nexport default Sidebar;\n"],"names":["focused","buttonRef","useRef","dispatch","useAppDispatch","useEffect","current","focus","className","onClick","createDocument","ref","id","useAppSelector","selectDocumentMetadata","documentName","createdOn","changeActiveDocument","documentIdList","selectAllIdsList","map","documentId","expanded","colorThemeSwitch"],"sourceRoot":""}